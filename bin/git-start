#!/bin/bash

# Use to start working on an existing branch.
# The script rebases on the latest master

# The script accepts the name of the target branch as first argument
# but it also allows being run like `git-start git checkout -b my-branch`. I know this is weird
# but softwares like JIRA tends to give you such commandsa as copy-and-go. So it's just a convinience feature.
if [[ $1 = "git" ]] && [[ $2 = "checkout" ]] && [[ $3 = '-b' ]] && [[ ! -z "$4" ]]; then
  branch=$4
else
  branch=$1
fi

current_branch=$(git branch --show-current)
default_branch=$(git-default-branch)

if [ -z "$branch" ]; then
  if [ "$current_branch" != "$default_branch" ]; then
    echo "You did not passed a branch name."
    echo "Going to use $current_branch."

    branch=$current_branch
  else
    echo "Please, specify a branch name."
    echo "Usage: $0 <branch>"
    exit 1
  fi
fi

# Stash any changes in the working tree
tree_changes=$(git status -s)
changes_stashed=0

if [ ! -z "$tree_changes" ]; then
  echo "Working tree is not clean."
  echo "Stashing the changes for you."

  git stash save -u "[git-start] Working changes"

  changes_stashed=1
fi

# Bring master up to date
git-master

# Either create or checkout the target branch
branch_exists=$(git branch -a | grep "$branch\$")

if [ -z "$branch_exists" ]; then
  echo "Branch $branch does not exist. Creating it."
  git checkout -b $branch
else
  echo "Branch $branch exists. Rebasing on master."
  git checkout $branch
  git pull
  git rebase $(git-default-branch)
fi

# Pop (any) stashed changes
if [ $changes_stashed -eq 1 ]; then
  echo "Popping the stashed changes."

  git stash pop
fi
